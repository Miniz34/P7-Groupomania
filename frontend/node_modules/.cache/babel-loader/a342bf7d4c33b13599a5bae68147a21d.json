{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, mergeProps as _mergeProps, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HeaderMainPage = _resolveComponent(\"HeaderMainPage\");\n\n  const _component_FillerTemplate = _resolveComponent(\"FillerTemplate\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_HeaderMainPage), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.publications, x => {\n    return _openBlock(), _createBlock(_component_FillerTemplate, _mergeProps({\n      key: x\n    }, x), null, 16\n    /* FULL_PROPS */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;;;6DACEA,aAAkBC,yBAAlB,sBACAC,oBAAgEC,SAAhE,EAAgE,IAAhE,EAAgEC,YAApCC,kBAAoC,EAAzCC,CAAiB,IAAhB;yBAAxBC,aAAgEC,yBAAhE,cAAgE;MAArBC,GAAG,EAAEH;IAAgB,CAAhE,EAA2DA,CAA3D,GAA4D,IAA5D,EAA4D;IAAA;IAA5D;GAAgE,CAAhE;;EAAA","names":["_createVNode","_component_HeaderMainPage","_createElementBlock","_Fragment","_renderList","$data","x","_createBlock","_component_FillerTemplate","key"],"sourceRoot":"","sources":["D:\\Code\\Projet 7\\p7-groupomania\\P7-Groupomania\\frontend\\src\\views\\FillerPublication.vue"],"sourcesContent":["<template>\r\n  <HeaderMainPage />\r\n  <FillerTemplate v-for=\"x in publications\" :key=\"x\" v-bind=\"x\" />\r\n\r\n\r\n</template>\r\n\r\n<script>\r\n\r\n// import moment from 'moment'\r\n\r\nimport FillerTemplate from \"@/components/FillerTemplate.vue\"\r\nimport HeaderMainPage from \"@/components/HeaderMainPage.vue\"\r\nconst id = sessionStorage.getItem(\"userId\")\r\n\r\n\r\n// const moment = require('moment');\r\n// moment.locale('fr')\r\nexport default {\r\n  components: {\r\n    HeaderMainPage,\r\n    FillerTemplate\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      publications: \"\",\r\n      comment: \"\",\r\n      image: \"\"\r\n    }\r\n  },\r\n  // computed: {\r\n  //   publicationId() {\r\n  //     return parseInt(this.$route.params.id)\r\n  //   },\r\n\r\n\r\n\r\n  // },\r\n\r\n  async created() {\r\n    const postId = this.$route.params.id;\r\n    fetch(`http://localhost:3000/api/publications/` + postId)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        this.publications = data\r\n        // const test = this.publications.user.username\r\n        // console.log(test)\r\n\r\n\r\n\r\n      })\r\n\r\n  },\r\n\r\n  methods: {\r\n    SendComment() {\r\n      // const moment = require('moment');\r\n      // const aujourdhui = moment();\r\n      console.log(\"hello\")\r\n      fetch('http://localhost:3000/api/comments/', {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          // 'Authorization': \"Bearer \" + sessionStorage.getItem(\"Token\")\r\n        },\r\n        body: JSON.stringify({\r\n          publicationId: this.publications.id,\r\n          commentaire: this.comment,\r\n          userId: id\r\n        })\r\n      }).then(\r\n        alert(\"votre commentaire a été publié\"))\r\n      location.reload()\r\n      const test = this.publications.id\r\n      console.log(test)\r\n        .catch((error) => {\r\n          console.log(error + \"message d'erreur filler\")\r\n        })\r\n\r\n\r\n\r\n    }\r\n  },\r\n  // computed: {\r\n  //   createdAt: function () {\r\n\r\n  //     const testdate = this.publications.createdAt\r\n  //     return moment(testdate).format('Do MMM YYYY - LTS')\r\n\r\n  //   },\r\n  //   commentCreatedAt: function () {\r\n\r\n  //     const testdate = this.publications.comments[0].createdAt\r\n  //     console.log(testdate)\r\n  //     return moment(testdate).format('Do MMM YYYY - LTS')\r\n\r\n  //     // new Date(post.createdAt).toLocaleString(\"fr-FR\", { timeZone: \"UTC\" })\r\n\r\n  //   }\r\n\r\n  // },\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.date {\r\n  margin-left: 25px\r\n}\r\n\r\n.comment {\r\n  margin-bottom: 20px\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}