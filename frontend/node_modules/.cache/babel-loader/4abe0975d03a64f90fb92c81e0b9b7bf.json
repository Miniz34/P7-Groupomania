{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HeaderMainPage = _resolveComponent(\"HeaderMainPage\");\n\n  const _component_PublicationSingleTemplate = _resolveComponent(\"PublicationSingleTemplate\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_HeaderMainPage), _createVNode(_component_PublicationSingleTemplate, _normalizeProps(_guardReactiveProps($data.publications)), null, 16\n  /* FULL_PROPS */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;;;6DACEA,aAAkBC,yBAAlB,GACAD,aAAmDE,oCAAnD,EAAmDC,oCAAhBC,kBAAgB,EAAnD,EAA+C,IAA/C,EAA+C;EAAA;EAA/C","names":["_createVNode","_component_HeaderMainPage","_component_PublicationSingleTemplate","_normalizeProps","$data"],"sourceRoot":"","sources":["D:\\Code\\Projet 7\\p7-groupomania\\P7-Groupomania\\frontend\\src\\views\\PublicationSingleView.vue"],"sourcesContent":["<template>\r\n  <HeaderMainPage />\r\n  <PublicationSingleTemplate v-bind=\"publications\" />\r\n\r\n\r\n\r\n\r\n</template>\r\n\r\n<script>\r\n\r\nimport HeaderMainPage from \"@/components/HeaderMainPage.vue\"\r\nimport PublicationSingleTemplate from '@/components/PublicationSingleTemplate'\r\nlet id = sessionStorage.getItem(\"userId\")\r\nconsole.log(id)\r\n\r\n\r\n\r\n\r\nexport default {\r\n  components: {\r\n    HeaderMainPage,\r\n    PublicationSingleTemplate\r\n  },\r\n  data() {\r\n    return {\r\n      publications: {},\r\n      comment: \"\",\r\n      image: \"\",\r\n      username: \"\",\r\n      id: sessionStorage.getItem(\"userId\"),\r\n      admin: sessionStorage.getItem(\"isAdmin\")\r\n    }\r\n  },\r\n  created() {\r\n\r\n\r\n    const postId = this.$route.params.id;\r\n    fetch(`http://localhost:3000/api/publications/` + postId, {\r\n      method: \"GET\",\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n        'Authorization': \"Bearer \" + sessionStorage.getItem(\"Token\")\r\n      },\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        this.publications = data\r\n        console.log(this.publications)\r\n        this.username = this.publications.user.username\r\n\r\n\r\n      })\r\n\r\n  },\r\n  methods: {\r\n    SendComment() {\r\n      // const moment = require('moment');\r\n      // const aujourdhui = moment();\r\n      console.log(\"hello\")\r\n      fetch('http://localhost:3000/api/comments/', {\r\n        method: \"POST\",\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': \"Bearer \" + sessionStorage.getItem(\"Token\")\r\n        },\r\n        body: JSON.stringify({\r\n          publicationId: this.publications.id,\r\n          commentaire: \"hello\",\r\n          userId: id\r\n        })\r\n      }).then(\r\n        alert(\"votre commentaire a été publié\"))\r\n      location.reload()\r\n      const test = this.publications.id\r\n      console.log(test)\r\n        .catch((error) => {\r\n          console.log(error + \"message d'erreur filler\")\r\n        })\r\n    },\r\n    deletePost() {\r\n      const postId = this.$route.params.id;\r\n      fetch('http://localhost:3000/api/publications/' + postId, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'Authorization': \"Bearer \" + sessionStorage.getItem(\"Token\")\r\n        },\r\n\r\n      })\r\n        .then(() =>\r\n          document.location.href = `http://localhost:8080/publications`)\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n    //////////////////// // Version obscure de v-if  ////////////////////////\r\n\r\n\r\n    // showButtons() {\r\n    //   let newId = sessionStorage.getItem(\"userId\")\r\n    //   // console.log(newId)\r\n\r\n    //   // let postCreator = false\r\n    //   // idPost = this.publications.user.userId\r\n    //   let idPost = this.publications.userId\r\n    //   if (newId == idPost) {\r\n    //     // postCreator = true\r\n    //     // console.log(postCreator)\r\n    //     console.log(newId)\r\n    //     console.log(idPost)\r\n    //     return true\r\n\r\n\r\n\r\n\r\n    //   } else {\r\n    //     // postCreator = false\r\n    //     // console.log(postCreator)\r\n    //     console.log(newId)\r\n    //     console.log(idPost)\r\n    //     return false\r\n\r\n\r\n    //   }\r\n    // }\r\n  },\r\n\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.date {\r\n  margin-left: 25px\r\n}\r\n\r\n.comment {\r\n  margin-bottom: 20px\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}